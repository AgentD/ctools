
  About
  *****

 This is small utility library for C programs, containing generic
 implementations of commonly used container structures, data structures,
 algorithms and operating system abstraction (filesystem access et cetera).


 At the moment, the following things are implemented:
  - container data structures
    - resizeable array
    - hash map
    - intrusive linked list
    - red-black tree
    - a container for blobs of data with auto detection
      and conversion of encoding
    - abstract allocator to create deep copies of user data types
    - abstract external iterator interface
  - string handling
    - UTF-8 dynamic string implementation
    - UTF-8 and UTF-16 string utilities
  - various sorting algorithm implementations
  - various non-cryptgraphic hash functions
  - command line option parsing
  - abstract filesystem and directory access
  - creating and managing child processes
  - creating and managing threads
    - thread abstraction
    - thread pool
  - synchronization primitives
    - mutex
    - read/write semaphore
    - monitor
  - abstract network I/O
    - IPv4 and IPv6 support
    - abstract byte stream oriented TCP and UDP client
    - TCP server that creates client streams for connections
    - packet oriented UDP server
    - name resolving
  - data compression


  Compiling
  *********

 The library uses a CMake based build system.

 On UNIX(R) like systems, run the following to create a build directory,
 generate make files and build the library:

    $ mkdir build
    $ cd build
    $ cmake ..
    $ make

 To cross compile the library from UNIX(R) like systems for 32 bit Windows(R)
 using the provided toolchain file, run the following instead:

    $ mkdir build
    $ cd build
    $ cmake .. -DCMAKE_TOOLCHAIN_FILE=../CMake/mingw.cmake
    $ make

 For 64 bit Windows(R), use '-DCMAKE_TOOLCHAIN_FILE=../CMake/mingw64.cmake'.

 To generate the doxygen API reference and documentation, run the following
 in the build directory after generating the Makefile:

    $ make doc

 This generates a HTML reference in <build_directory>/doxydoc/html, man pages
 for section 3 under <build_directory>/doxydoc/man and LaTeX input files in
 <build_directory>/doxydoc/latex.

 The doxygen reference includes hand written documentation pages with lots
 of examples.

 To run the unit tests, run the following:

    $ make test




 To compile the library on Windows(R), start the CMake gui, set the input
 directory to the root source directory containing the CMakeLists.txt file
 and set an output directory of your choice. Click 'configure', select a
 build system, click 'configure' again, then click 'generate'.

 Use the generated build system files in the target directory (e.g. MSVC
 solution) to compile the library.



 If the cmake option "SHARED" is set, a shared library is generated. When
 crosscompiling for Windows(R), the option "USEWINE" can be set to run the
 unit test programs via wine.


  Directory Hirarchy
  ******************

 The root directory contains the following files and directories:
  - CMake/              Containing misc. CMake files (e.g. toolchain files)
  - core/               Contains the core library (containers, algorithsm,...)
    - include/          Contains the core library headers
    - src/              Contains the core library source
    - CMakeLists.txt    CMake file for core library
  - os/                 Contains the OS abstraction library (threads,
                        network, ...)
    - include/          Contains the OS library headers
    - src/              Contains the OS library source
    - CMakeLists.txt    CMake file for OS library
  - tests/              Contains unit tests
  - CMakeLists.txt      CMake build system main input file
  - Doxyfile.in         Doxygen input file consumed by build system
  - LICENSE             License file
  - README              The file you are reading right now



  License
  *******

 Copyright (C) 2015 - David Oberhollenzer

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in
 all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.

