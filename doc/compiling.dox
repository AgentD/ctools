/**
\page compiling Compiling the library from source

\section compnix Compiling on Unix-like systems

On a Unix-like operating system, the Autotools based build system can
be used:

\code{.sh}
./configure
make
make install
\endcode

When working with the Git tree, run the \b autogen.sh script first,
to generate the configure script.

The usual build and (cross) compilation options can passed to the configure
script.

The following additional configure options are available:

\li \b --disable-deflate Disable the zlib deflate/inflate support.
    If left enabled (default), the core library depends on Zlib, wich
    is searched for using pkg-config.
\li \b --with-builtin-zlib Use a stripped down version of Zlib included
    in the source tree, instead of the one installed on the system and
    compile it statically into the core library.

The doxygen documentation and reference manual you are reading right now can
be generated by running \b "make doxygen-doc".

The unit tests can be built and executed by running \b "make check".

\section compwin Compiling on Windows

First, start the CMake GUI program. The CMake GUI program will display a
window similar to the one seen below.

\image html s0.png "CMake GUI with source and build path entered"
\image latex s0.png "CMake GUI with source and build path entered" width=0.6\textwidth

The image above shows the CMake GUI running with source and build paths
already entered. The path to the root of the source directory is entered into
the text box marked with a red \b 1. The \b "Browse Source" button can be used
to open a directory browser dialog to enter the source directory.

The directory used by the build system to compile and build the binaries is
entered into the text box marked with a red \b 2. Similar to the source
diretory, the button \b "Browse Build" can be used to open a directory
browser dialog to navigate to the build directory.

After the paths are entered, press the \b "Configure" button marked with a
red \b 3 in the image above.

\image html s1.png "Creating the build directory"
\image latex s1.png "Creating the build directory" width=0.6\textwidth

If the build directory does not yet exist when pressing the configure button,
the CMake GUI will display a message box, asking for permission to create the
build directory, as seen in the image above.

\image html s2.png "Generator settings"
\image latex s2.png "Generator settings" width=0.6\textwidth

After creating the build directory, the CMake GUI displays a dialog for
selecting and configuring the toolchain used to compile the software.
Depending on the toolchain used, this dialog may consist of multiple pages.

\image html s3.png "CMake GUI after generating the output"
\image latex s3.png "CMake GUI after generating the output" width=0.6\textwidth

After configuring the toolchain, the CMake GUI displays a list of build
configuration settings as seen above. In the initial state, the list is
highlighted in red. The following options are currently available:

\li \b SHARED If set, generate a shared library (DLL). If not set, generate a
    static library. If this is set, the pre-processor definition \b TL_SHARED
    is set in the library source code. Default is \b OFF.
\li \b HAVE_DEFLATE If set, deflate compression via zlib is supported. Setting
    this will set the pre-processor definition \b TL_HAVE_DEFLATE in the
    library source code and add a Zlib stub from the "3rdparty" directory to
    the core library source. Default is \b ON.

After setting the configuration, click on the button \b "Generate" next to the
"Configure" button. This generates the necessary toolchain files in the build
directory.

Afer this is all done, \b run the \b toolchain inside the \b build \b directory.
For instance, if Visual Studio was selected as a toolchain, open the Visual
Studio solution file in the build directory and compile the the solution.

You can optionally build the target \b RUN_TESTS to run the automated
unit tests.
*/
